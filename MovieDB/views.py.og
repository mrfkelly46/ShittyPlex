from collections import OrderedDict

from django.contrib.auth.decorators import login_required
from django.shortcuts import render, redirect, get_object_or_404
from django.http import HttpResponse

from MovieDB.models import Movie, UserProfile

from MovieDB.lib import search as db_search

# Create your views here.
def home(request):
    context = {}
    return render(request, 'MovieDB/home.html', context)

def movie(request, id):
    context = {}
    context['q'] = request.GET.get('q')
    context['movie'] = get_object_or_404(Movie, id=id)
    return render(request, 'MovieDB/movie_view.html', context)

def random(request):
    # Randomly order movies, take the first result
    context = {}
    movie = Movie.objects.all().order_by('?').first()
    return redirect('MovieDB:movie', id=movie.id)

def search(request):
    context = {}
    q = request.GET.get('q')
    movies = db_search(q)
    if len(movies) == 1:
        response = redirect('MovieDB:movie', id=movies[0].id)
        response['Location'] += '?q=' + q
        return response
    context['q'] = q
    context['movies'] = movies
    return render(request, 'MovieDB/search.html', context)

def advanced_search(request):
    sort_options = OrderedDict()
    sort_options['Title (A to Z)'] = 'title'
    sort_options['Title (Z to A)'] = '-title'
    sort_options['Year (New to Old)'] = '-year'
    sort_options['Year (Old to New)'] = 'year'
    sort_options['Runtime (Short to Long)'] = 'runtime'
    sort_options['Runtime (Long to Short)'] = '-runtime'
    sort_options['IMDb Rating (High to Low)'] = '-imdbrating'
    sort_options['IMDb Rating (Low to High)'] = 'imdbrating'
    sort_options['Date Added (New to Old)'] = '-added'
    sort_options['Date Added (Old to New)'] = 'added'
    context = {
        'sort_1': 'title',
        'sort_2': 'year',
        'sort_options': sort_options,
    }
    if request.GET:
        filters = request.GET.get('filters') 
        sort_1 = request.GET.get('sort_1')
        sort_2 = request.GET.get('sort_2')
        if 'search' in request.GET:
            movies = db_search(filters, sort_1, sort_2)
            context['search'] = True
            context['movies'] = movies
            context['num_results'] = len(context['movies'])
        elif 'random' in request.GET:
            movies = db_search(filters, '?', '?')
            context['random'] = True
            context['movie'] = movies.first()
        context['filters'] = filters
        context['sort_1'] = sort_1
        context['sort_2'] = sort_2
    return render(request, 'MovieDB/advanced_search.html', context)

@login_required
def profile(request):
    context = {}
    return render(request, 'MovieDB/profile.html', context)


